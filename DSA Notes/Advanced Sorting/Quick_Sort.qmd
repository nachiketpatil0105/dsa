---
title: "Quick Sort"
---

### üìñ Theory

Quick Sort is a **divide and conquer** sorting algorithm. It works by selecting a "pivot" element from the array and partitioning the other elements into two subarrays, according to whether they are less than or greater than the pivot. The subarrays are then sorted recursively.

**Steps:**

1. Choose a pivot element (commonly the last element).
2. Partition the array so that all elements less than the pivot are on the left, and all elements greater than the pivot are on the right.
3. Recursively apply the above steps to the subarrays on the left and right of the pivot.

**Time Complexity:**

- Best: O(n log n)
- Average: O(n log n)
- Worst: O(n¬≤) (when the smallest or largest element is always chosen as the pivot)

**Space Complexity:** O(log n) (due to recursion stack)

**Stable:** ‚ùå No  
**In-place:** ‚úÖ Yes

---

### ‚úÖ Code (C++)

```cpp
int partition(vector<int>& arr, int s, int e) {
  int pivot = s;
  int count = 0;

  // Count all the numbers which are less the pivot number
  for (int i = s; i < e + 1; i++) {
    if (arr[i] < arr[pivot]) {
      count++;
    }
  }

  pivot = s + count;
  int i = s, j = e;

  while (i < pivot && j > pivot) {
    if (arr[i] < arr[pivot]) {
      i++;
    }
    else if (arr[j] >= arr[pivot]) {
      j--;
    }
    else {
      swap(arr[i], arr[j]);
      i++;
      j--;
    }
  }
}

void quickSort(vector<int>& arr, int s, int e) {
  if (s >= e) {
    return;
  }

  int p = partition(arr, s, e);

  quickSort(arr, s, p - 1);
  quickSort(arr, p + 1, e);
}
```
