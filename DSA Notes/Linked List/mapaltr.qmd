---
title: "Alternative for Maps with O(1) Space Complexity"
---

### ðŸ“– Theory

In some linked list problems, such as cloning a linked list with random pointers, maps are often used to keep track of original and cloned nodes. However, you can achieve O(1) space complexity by cleverly manipulating the list structure itself, without using extra data structures like maps.

---

**How It Works:**

- Step 1: Create a clone list with only data copied.
- Step 2: Insert cloned nodes in between original nodes.
- Step 3: Set the random pointers for the cloned nodes using the interleaved structure.
- Step 4: Restore the original list and extract the cloned list.
- Step 5: Return the head of the cloned list.

---

**Algorithm Implementation:**

```cpp
    void insertAtTail(Node*& head, Node*& tail, int value) {
        Node* newNode = new Node(value);
        if (!head) {
            head = newNode;
            tail = newNode;
        }
        else {
            tail -> next = newNode;
            tail = newNode;
        }
    }

    Node* copyList(Node* head) {
        // Step 1: Create a Clone List
        Node* cloneHead = nullptr;
        Node* cloneTail = nullptr;
        Node* temp = head;
        while (temp != nullptr) {
            insertAtTail(cloneHead, cloneTail, temp -> data);
            temp = temp -> next;
        }

        // Step 2: Insert nodes of Clone List in between original list
        Node* originalNode = head;
        Node* cloneNode = cloneHead;
        while (originalNode != nullptr && cloneNode != nullptr) {
            Node* next = originalNode -> next;
            originalNode -> next = cloneNode;
            originalNode = next;

            next = cloneNode -> next;
            cloneNode -> next = originalNode;
            cloneNode = next;
        }

        // Step 3: Random pointer copy
        originalNode = head;
        cloneNode = cloneHead;
        while (originalNode != nullptr && cloneNode != nullptr) {
            if (originalNode -> random != nullptr) {
                cloneNode -> random = originalNode -> random -> next;
            }
            else {
                cloneNode -> random = nullptr;
            }
            cloneNode = cloneNode -> next;
            originalNode = originalNode -> next;
        }

        // Step 4: Revert step 2 changes (restore original and extract clone)
        Node* original = head;
        Node* copy = cloneHead;
        while (original && copy) {
            if (original -> next) {
                original -> next = original -> next -> next;
            } else {
                original -> next = original -> next;
            }

            if (copy -> next) {
                copy -> next = copy -> next -> next;
            } else {
                copy -> next = copy -> next;
            }

            original = original -> next;
            copy = copy -> next;
        }

        // Step 5: Return the head of the cloned list
        return cloneHead;
    }
```

---

**Advantages:**

- Achieves O(1) extra space (no maps or extra data structures).
- Efficient and elegant for problems involving random pointers.

---

**Time and Space Complexity:**

| Operation           | Time Complexity | Space Complexity |
|---------------------|----------------|------------------|
| Clone Linked List   | O(n)           | O(1)             |

---