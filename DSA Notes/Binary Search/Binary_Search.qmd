
---
title: "Binary Search"
---

### ðŸ“– Theory

Binary Search is an efficient algorithm to find the position of a target value within a **sorted** array.  
It repeatedly divides the search interval in half, comparing the target with the middle element.

---

**Note:** Only works when array is sorted.

---

**Steps:**

1. Set s = 0, e = n - 1.
2. While s <= e:
   - Find mid = (s + e) / 2.
   - If arr[mid] == target, return mid.
   - If arr[mid] < target, set s = mid + 1.
   - If arr[mid] > target, set e = mid - 1.
3. If not found, return -1.

**Time Complexity:**

- Best: O(1) _(if the middle is the target)_
- Average: O(log n)
- Worst: O(log n)

**Space Complexity:** O(1)

**Extra Things to Know**

Some times we face issue of **index out of range**. In such cases try taking s = 1 and e = n - 2. And ensure conditions on 0 and n - 1 before applying the while loop.

---

### âœ… Code (C++)

```cpp
int binarySearch(const vector<int>& arr, int target) {
    int s = 0, e = arr.size() - 1;
    int mid = s + (e - s) / 2;
    while (s <= e) {
        if (arr[mid] == target) {
            return mid;
        }
        else if (arr[mid] < target) {
            s = mid + 1;
        }
        else {
            e = mid - 1;
        }
        mid = s + (e - s) / 2;
    }
    return -1; // Not found
}
```
