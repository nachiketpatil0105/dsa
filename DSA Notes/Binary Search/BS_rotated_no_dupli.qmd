---
title: "Binary Search in Rotated Sorted Array (No Duplicates)"
---

### ðŸ“– Theory

The array will be like {5, 6, 7, 8, 1, 2, 3}, here we have to find target element with the help of **Binary Search**.

---

**Steps:**

1. To find the pivot index (index of the smallest element), set s = 0, e = n - 1.
2. While s < e:
    - Find mid = (s + e) / 2.
    - If arr[mid] >= arr[0], set s = mid + 1.
    - Else set e = mid.
3. After the loop, s will be the index of the smallest element (pivot).
4. Compare the target element with arr[0]:
    - If target >= arr[0], apply binary search on the range [0, pivot - 1].
    - Else, apply binary search on the range [pivot, n - 1].
  
---

### âœ… Code (C++)

```cpp
int pivot(vector <int> &arr) {
    int s = 0, e = arr.size() - 1;
    int mid = s + (e - s) / 2;
    while (s < e) {
        if (arr[mid] >= arr[0]) {
            s = mid + 1;
        }
        else {
            e = mid;
        }
        mid = s + (e - s) / 2;
    }

    return s;
}

// Now apply Binary Search
```