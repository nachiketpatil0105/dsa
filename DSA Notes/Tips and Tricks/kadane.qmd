---
title: "Kadane Algorithm"
---

### ðŸ“– Theory

**Kadane's Algorithm** is an efficient method to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers (which may include negative numbers).  
It works by iterating through the array and maintaining:

- curr_max: the maximum sum of the subarray ending at the current index.
- all_max: the maximum sum seen so far among all subarrays.

- If curr_max becomes negative, it is reset to zero (since adding a negative prefix will not help in getting a maximum sum later).
- The algorithm can be extended to also track the actual subarray, not just the sum.

---

**C++ Implementation (Sum Only):**

```cpp
// Returns the maximum subarray sum
int kadane(vector<int>& arr) {
    int all_max = INT_MIN; // Stores the maximum sum found so far
    int curr_max = 0;      // Stores the current subarray sum

    for (int x : arr) {
        curr_max += x;
        all_max = max(curr_max, all_max);
        if (curr_max < 0) {
            curr_max = 0;
        }
    }
    return all_max;
}
```

---

**C++ Implementation (Sum and Subarray Indices):**

```cpp
// Returns the maximum subarray sum and its indices
int kadaneWithIndices(vector<int>& arr, int& start, int& end) {
    int all_max = INT_MIN;
    int curr_max = 0;
    int s = 0;
    start = end = 0;

    for (int i = 0; i < arr.size(); i++) {
        curr_max += arr[i];

        if (curr_max > all_max) {
            all_max = curr_max;
            start = s;
            end = i;
        }

        if (curr_max < 0) {
            curr_max = 0;
            s = i + 1;
        }
    }
    return all_max;
}
```

---

**Variable Explanation:**

- all_max: The maximum sum found so far during traversal.
- curr_max: The sum of the current subarray ending at the current index.
- start, end: Indices marking the beginning and end of the maximum sum subarray.
- s: Temporary starting index for the current candidate subarray.

---

**Visualization:**

```cpp
Given array: [-2, 1, -3, 4, -1, 2, 1, -5, 4]

- Maximum sum subarray: [4, -1, 2, 1]
- Maximum sum: 6
```

---

**Advantages:**

- Linear time complexity O(n).
- Simple and easy to implement.
- Works efficiently even when negative numbers are present.
- Uses constant space.

---

**Disadvantages:**

- Only gives the sum by default; modification needed to get indices or actual subarray.
- Does not handle circular subarrays directly (requires circular Kadaneâ€™s algorithm).

---

**Edge Cases & Notes:**

- If all numbers are negative, it returns the largest (least negative) number.
- For circular arrays, use:  
  max(kadane(arr), totalSum - kadane(invert signs of arr))
- If the array is empty, handle appropriately to avoid undefined behavior.

---

**Applications:**

- Maximum profit in stock trading (1 transaction).
- Analyzing periods of maximum gains/losses in financial or climate data.
- Important component in many dynamic programming problems.
- Used in signal processing and time series analysis.

---

**Time and Space Complexity:**

- **Time Complexity:** O(n)
- **Space Complexity:** O(1)

---
