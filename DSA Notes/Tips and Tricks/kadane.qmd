---
title: "Kadane Algorithm"
---

### ðŸ“– Theory

**Kadane's Algorithm** is an efficient method to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers (which may include negative numbers).  
It works by iterating through the array and keeping track of the current subarray sum and the maximum sum found so far.

- If the current subarray sum becomes negative, reset it to zero (since a negative sum will not help in finding the maximum sum ahead).
- The algorithm can be extended to also find the actual subarray, not just the sum.

---

**C++ Implementation (Sum Only):**

```cpp
// Returns the maximum subarray sum
int kadane(vector<int>& arr) {
    int all_max = INT_MIN; // Stores the maximum sum found so far
    int curr_max = 0;  // Stores the current subarray sum

    for (int x : arr) {
        curr_max += x;
        all_max = max(curr_max, all_max);
        if (curr_max < 0) {
            curr_max = 0;
        }
    }
    return all_max;
}
```

---

**C++ Implementation (Sum and Subarray Indices):**

```cpp
// Returns the maximum subarray sum and its indices
int kadaneWithIndices(vector<int>& arr, int& start, int& end) {
    int all_max = INT_MIN;
    int curr_max = 0;
    int s = 0;
    start = end = 0;

    for (int i = 0; i < arr.size(); i++) {
        curr_max += arr[i];
        if (all_max < curr_max) {
            all_max = curr_max;
            start = s;
            end = i;
        }
        if (curr_max < 0) {
            curr_max = 0;
            s = i + 1;
        }
    }
    return all_max;
}
```

---

**Variable Explanation:**

- all_max: The maximum sum found so far.
- curr_max: The sum of the current subarray being considered.
- start, end: Indices marking the beginning and end of the maximum sum subarray.
- s: Temporary start index for the current subarray.

---

**Visualization:**

```cpp
Given array: [-2, 1, -3, 4, -1, 2, 1, -5, 4]

- Maximum sum subarray: [4, -1, 2, 1]
- Maximum sum: 6
```

---

**Advantages:**

- Linear time complexity O(n).
- Simple and easy to implement.
- Works for arrays with negative numbers.

---

**Disadvantages:**

- Only finds the sum, not the actual subarray (unless modified as above).
- Does not work for circular subarrays (needs extension).

---

**Edge Cases & Notes:**

- If all numbers are negative, Kadaneâ€™s algorithm returns the largest (least negative) number.
- For circular arrays, use the "circular Kadane" extension.

---

**Applications:**

- Maximum profit in stock trading (single transaction).
- Finding periods of maximum gain/loss.
- Used in dynamic programming problems.
- Signal processing and time series analysis.

---

**Time and Space Complexity:**

- **Time Complexity:** O(n)
- **Space Complexity:** O(1)

---